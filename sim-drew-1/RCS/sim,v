head	1.13;
access;
symbols;
locks
	drew:1.13; strict;
comment	@# @;


1.13
date	2001.09.02.00.44.26;	author drew;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.31.16.23.52;	author drew;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.30.20.58.04;	author drew;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.30.15.29.57;	author drew;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.23.21.07.59;	author drew;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.23.20.17.49;	author drew;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.23.20.17.26;	author drew;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.23.20.11.00;	author drew;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.23.19.58.24;	author drew;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.23.19.57.48;	author drew;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.23.19.16.01;	author drew;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.23.19.14.01;	author drew;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.23.19.13.55;	author drew;	state Exp;
branches;
next	;


desc
@@


1.13
log
@*** empty log message ***
@
text
@#!/usr/bin/perl -w

use Carp;
use strict;

$SIG{__DIE__} = \&Carp::confess;

my $Debug = 0;
my $Version = '$Id: sim,v 1.12 2001/08/31 16:23:52 drew Exp drew $';
my $Visual_mode = 0;

use Tk qw(exit);
# use Tk::Xrm;

use Tk::widgets qw(Button Label Menu Photo Optionmenu Pixmap Balloon);
use Tk::widgets qw(Scrollbar Checkbutton Radiobutton Entry
                   Message BrowseEntry Listbox);

my $Show_messages = 1;
my $In_range = 0;
my @@Transmit;

use Config;

sub back_trace {
	my @@info;
	my $i = 0;

	while (@@info = caller($i)) {
		print "$i: ",join(' ',@@info),"\n";
		$i++;
	}
}

sub abort {
	dump_all("Simulation.bug");

	print "\a";
	print "*" x 78, "\n";
	print  "@@_\n";
	print "*" x 78, "\n";

	&back_trace();
	print "*" x 78, "\n";

	die "aborted\n";
}

sub send_test {
	my ($w) = @@_;
	my $result = eval { $w->send('basic_demo',"Hi there") };

	die "Send failed '$@@'" if ($@@);
	print "Send returned '$result'\n";
}

sub entry {
	my $top = shift;
	my $scroll = shift;
	my $f  = ($scroll) ? $top->Frame() : $top;
	my $e  = $f->Entry("-relief","ridge",@@_);
	$e->pack("-side"=>"top","-fill"=>"x","-expand"=>"yes");
	$e->bind("<Any-Enter>", sub { shift->focus() });
	$e->bind("<Any-FocusIn>",  sub { shift->configure("-relief" => "sunken") });
	$e->bind("<Any-FocusOut>", sub { shift->configure("-relief" => "ridge" ) });
	if ($scroll) {
	   my $es = $f->Scrollbar(-orient=>"horizontal","-command",["view",$e], -width => '4m');
	   $e->configure("-scrollcommand",["set",$es]);
	   $es->pack("-side"=>"bottom","-fill"=>"x");
	   $f->pack("-side","top");
	}
	return $e;
}

sub button {
	return shift->Button(@@_)->pack(-side => 'left');
}

sub checkbutton {
	my $top = shift;
	my $b = $top->Checkbutton(@@_);
	$b->pack(-side => 'left');
	return $b;
}

sub radiobutton {
	my $top = shift;
	my $b = $top->Radiobutton(@@_);
	$b->pack(-side => 'left');
	return $b;
}

sub label {
	my $top = shift;
	my $w = $top->Label((@@_) ? @@_ : ('-text' => "A Label") );
	$w->pack("-side"=>"bottom","-fill"=>"x");
	return $w;
}

sub menubar {
	my $top  = shift;
	my $menu = $top->Menubar;
	my $file = $menu->Menubutton(-text => "File");

	$file->command(-label => "Save",    -command => \&dump_all);
	$file->separator;
	$file->command(-label => "Options", -command => \&options);
	$file->separator;
	$file->command(-label => "Quit",    -command => sub { exit });

	$file = $menu->Menubutton(-text => "Exceptions");

	$file->checkbutton(-label => 'Show messages', -variable => \&Show_messages);
	$file->separator;
	$file->command("-label","Busy","-command"  => \&MakeBusy,"-underline" => 0);
	$file->command("-label","Exit","-command"  => sub { exit 0 },"-underline" => 0);

	$menu->cascade(-label => 'Help', -underline => 0,
	      -menuitems => [[ Command => '~Versions', -command => [\&ShowVersion, $top ]]]
				     );
	return $menu;
}

my $top = MainWindow->new();

$top->optionAdd($top->Name.'*Dialog*Background', 'yellow');

$Tk::_mw_ = $top;

$top->bind('MainWindow','<Map>',
	sub {
                 printf "Mapped %.3g Sec. after bootstrap (u=%.3g s=%.3g)\n",Tk::Time_So_Far,times;
                 printf("%gK\n",Memory->used/1024) if (defined &Memory::used);
                 system("/bin/ps","-o",'vsz,osz,rss,pmem,time','-p',$$) if ($^O eq 'solaris');
	}
);

my $camel   = $top->Photo(-format => 'gif', -file => Tk->findINC("Xcamel.gif"));

# print "camel is ",$camel->width," wide\n";

sub ShowVersion {
	my $top = @@_;
	my $d = $top->Dialog(
		-title => 'Versions',
		-popover => $top,
		-image => $camel,
		-fg  => '#800000',
		-justify => 'center',
		-text => <<"EOF",
"Radio Simulator $Version
Core Tk version : $Tk::version
Tk patchLevel : $Tk::patchLevel
library : $Tk::library
perl/Tk Version : $Tk::VERSION
EOF
	);
	$d->Show;
}

sub MakeBusy {
	$top->Busy(-recurse => 1);
	warn "Waiting\n";
	my $done = 0;
	$top->after(6000, sub { $done = 1; warn "Fired\n" });
	Tk::DoOneEvent(0) until ($done);
	$top->Unbusy
}

&menubar($top);

#---------------------------------------------------------------------------
# Button Bar
#---------------------------------------------------------------------------
my $bf = $top->Frame->pack(-fill => 'x');
&button($bf, -text => 'Exit',    -command => sub { exit });
&button($bf, -text => 'Options', -command => \&options);
&button($bf, -text => 'Restart', -command => \&restart);
&button($bf, -text => 'Xmit',    -command => \&transmit_step);
&button($bf, -text => 'Step',    -command => \&cluster_step);
&button($bf, -text => 'Cluster', -command => \&cluster_all);
&button($bf, -text => 'Run',     -command => \&run_all);

$bf->Entry(-textvariable => \$In_range)->pack(-side => 'right');
$bf->Label(-text => 'In Range')->pack(-side => 'right');

#---------------------------------------------------------------------------
my $Command = "";
$bf->Button(-text => 'Go', -command => [ \&command, \$Command ])->pack(-side => 'right');
$bf->Entry(-textvariable =>\$Command)->pack(-side =>'left', -fill => 'x');

sub command {
	my($cmd) = @@_;

	print "+ $$cmd\n";
}


#============================================================================
# Battlefield tools
#============================================================================
my $Battlefield = $top->Scrolled('Canvas',
	-height => 600, -width =>900,
#	-fillx => 1, -filly => 1
	)->pack(
	-side => 'right', -fill => 'both', -expand => 1);


$top->update("idletasks");

my %Radios;	# list of all radios
my %Arp;	# arp table for show_radios

#my $Width = 20_000;
my $Width = 1_000;
my $Range = 500;
my $Units = 15;
my $Scale = 3;

sub get_value {
	my($w, $text, $refvar) = @@_;

	my $f = $w->Frame();
	my $l = $f->Label(-text => $text);
	 $l->pack(-side => "left");

	my $t = $f->Entry(-textvariable => $refvar)->pack(
		-side => 'right', -fill => 'x');

	$f->pack(-fill => 'x', -side => 'top');
}

sub options {
	my $win = MainWindow->new();

	get_value($win, 'Width', \$Width);
	get_value($win, 'Range', \$Range);
	get_value($win, 'Units', \$Units);
	get_value($win, 'Scale', \$Scale);
	get_value($win, 'Visual', \$Visual_mode);
}

sub inrange {
	my($a, $b) = @@_;

	my $ax = $a->{x};
	my $ay = $a->{y};

	my $bx = $b->{x};
	my $by = $b->{y};

	my $dx = abs($ax - $bx);
	my $dy = abs($ay - $by);

#	return sqrt($dx*$dx + $dy*$dy) < ($Range/2);
	return $dx*$dx + $dy*$dy < ($Range*$Range/4);
}

sub delete_radio {
	my($mac) = @@_;

	$Battlefield->delete($Radios{$mac}->{name});
	delete $Radios{$mac};
}

sub show_radio {
	my($unit) = @@_; 
	my($c, $o, $l);

	my(%Color) = (
		'M' => '#ff0000', 	# Master   red
		'A' => '#008000', 	# Aprentis green
		'B' => '#ffff00', 	# Bonds    yellow
		'S' => '#00ffff', 	# Slaves   cyan
		'F' => '#0000ff');	# Freemen  blue


	my($x, $y) = unit_pos($unit);

	my($range) = $Range / $Scale / 2;
	my($tag) = $unit->{name};

	$Battlefield->delete($tag);

	my($color) = $Color{$unit->{status}};

	$Battlefield->createOval($x-$range, $y-$range,
				 $x+$range, $y+$range,
				-outline => $color,
				-tags => $tag);
	$Battlefield->createOval($x-2, $y-2, $x+2, $y+2, 
		-outline => $color, -tags => $tag);

	if ($unit->{status} eq 'S') {
		my $master = $unit->{master};
		abort("slave $unit->{name} has no master") unless $master;

		$master = $Radios{$Arp{$master}};

		$Battlefield->createLine($x, $y, unit_pos($master),
				-fill => $color, 
				-arrow => 'last',
				-tags => $tag);

		my($to, $from);
		foreach $from (keys %{$unit->{link}}) {
			$to = $unit->{link}{$from};
print "link $from -> $to\n";
			$Battlefield->createLine($x, $y, 
				unit_pos($Radios{$Arp{$to}}),
				-fill => 'pink',
				-width => 3, 
				-arrow => 'last',
				-tags => $tag);

			$Battlefield->createLine($x, $y, 
				unit_pos($Radios{$Arp{$from}}),
				-fill => 'pink',
				-width => 3, 
				-arrow => 'last',
				-tags => $tag);
		}
	}

	if ($unit->{status} eq 'B') {
		my($to, $from);

		foreach $from (keys %{$unit->{bond}}) {
			$to = $unit->{bond}{$from};
print "bond $from -> $to\n";
			$Battlefield->createLine($x, $y, 
				unit_pos($Radios{$Arp{$to}}),
				-fill => 'yellow',
				-width => 2, 
				-arrow => 'last',
				-tags => $tag);

			$Battlefield->createLine($x, $y, 
				unit_pos($Radios{$Arp{$from}}),
				-fill => 'yellow',
				-width => 2, 
				-arrow => 'last',
				-tags => $tag);
		}
	}

}

sub unit_pos {
	my($unit) = @@_;

	abort("$unit->{name} has no x/y") unless defined $unit->{x} and defined $unit->{y};

	my($x) = int($unit->{x} / $Scale);
	my($y) = int($unit->{y} / $Scale);

	print "$unit->{name} = $x, $y\n" if $Debug;

	return ($x, $y);
}

sub say {
	my($unit, $msg) = @@_;
	my($mac, $other);
	my($frommac) = $unit->{mac};
	
printf "Transmit $frommac == %-8s msg: %s\n", $unit->{name}, $msg;
	foreach $mac (keys %Radios) {
		$other = $Radios{$mac};

		next if $frommac eq  $other->{mac};

		next unless inrange($unit, $other);

		$Battlefield->createLine(unit_pos($unit), unit_pos($other),
				-arrow => 'last',
				-tags => 'messages');

		$other->receive($frommac, $msg);
		++$In_range;
	}
}

my @@Talk;
my $Clock = 0;
my $Tick  = 0;

sub display_time {
	my($char) = @@_;
	printf "%-70s %5d.%03d\n",  $char x 70, $Clock, $Tick;
}

sub transmit_work {
	my($radio, $msg);

	return unless @@Transmit;

	display_time('-');

	$radio = shift @@Transmit;
	$msg   = shift @@Transmit;

	say($radio, $msg);

	++$Tick;
}

sub transmit_step {
	$Battlefield->delete('messages');

	if (@@Transmit == 0) {
		cluster_work();
	}
	transmit_work();
	show_all();
}

sub cluster_work {
	my($radio, $cnt, $mac);

	display_time('=');

	$cnt = @@Talk;
	if ($cnt == 0) {
		@@Talk = get_ticks();
		$cnt = @@Talk;
	}
	
	$In_range = 0;
	while ($In_range == 0 && @@Talk) {
		--$cnt;
		$radio = pop @@Talk;
		$mac   = $radio->{mac};

		print "Tick $Clock.$Tick\t$mac $radio->{status} $radio->{name}\n";
		$radio->tick();
	}
	
}

sub cluster_step {
	$Battlefield->delete('messages');

	while (@@Transmit) {
		transmit_work();
	}
	cluster_work();
	show_all();
}

sub cluster_all {
	my($i);
	my($clock) = $Clock;

	display_time('*');

	$Battlefield->delete('messages');
	while ($clock == $Clock) {
		while (@@Transmit) {
			transmit_work();
		}
		cluster_work();
	}
	show_all();
}


sub get_ticks {
	my $lowclock = 100_000_000;
	my(@@list, $tick,$radio);

	foreach $radio (values %Radios) {
		$tick = $radio->{clock};
		$lowclock = $tick if $lowclock > $tick;
	}

	$lowclock = 1 if $lowclock <= 0;

	$Tick += $lowclock;
	if ($Tick >= 1000) {
		$Tick -= 1000;
		++$Clock;
		display_time('~');
		move_all();
	}

	foreach $radio (values %Radios) {
		if (($radio->{clock} -= $lowclock) <= 0) {
			push(@@list, $radio);
		}
	}
	return @@list;
}

sub move_all {
	my($i, $unit, $x, $y);

	foreach $i (keys %Radios) {
		$unit = $Radios{$i};

		$x = $unit->{x} += $unit->{dx};
		if ($x < 0 || $x > $Width) {
			$unit->{dx} = -$unit->{dx};
			$unit->{x} += $unit->{dx};
		}

		$y = $unit->{y} += $unit->{dy};
		if ($y < 0 || $y > $Width) {
			$unit->{dy} = -$unit->{dy};
			$unit->{y} += $unit->{dy};
		}
	}
}
sub run_all {
	for (;;) {
		cluster_all();
		sleep(1);
	}
}

sub show_all {
	my($mac);

	foreach $mac (keys %Radios) {
		show_radio($Radios{$mac});
	}
	$top->update("idletasks");
}

sub restart {
	my($i, $mac);

	$Battlefield->delete('messages');

	foreach $mac (sort keys %Radios) {
		delete_radio($mac);
	}

	dump_all("Simulation.start");

	foreach $i (1..$Units) {
		$mac = sprintf("XX:%02d:%02d", int($i/100), $i % 100);

		$Radios{$mac} = Radio::new($mac, "u-$i", $Width);
		$Arp{"u-$i"} = $mac;
	}
	show_all();
}

sub dump_all {
	my($file) = @@_;
	$file ||= "Simulation.dump";

	my($mac, $radio, $key, $val);

	open(F, "> $file");

	foreach $mac (sort keys %Radios) {
		$radio = $Radios{$mac};

		foreach $key (sort keys %$radio) {
			if (ref ($val = $radio->{$key})) {
				$val = dump_ref($val);
			}
			print F "$key\t$val\n";
		}

		print F "\n";
	}
	close(F);
}

sub dump_ref {
	my($ref) = @@_;
	my($val) = "$ref";
	my($key);

	if ($val =~ /^ARRAY/) {
		$val = '[';
		foreach $key (@@$ref) {
			$val .= " $key";
		}
		$val .= ' ]';

	} elsif ($val =~ /^HASH/) {
		$val = "{";
		foreach $key (keys %$ref) {
			 $val .= " $key => $ref->{$key} ";
		}
		$val .= " }";
	}

	return $val;
}

package Radio;

sub transmit {
	push(@@Transmit, @@_);
}

sub inrange {
	my($radio, $other_mac) = @@_;

	main::abort("No such radio: $other_mac") 
		unless defined $Radios{$other_mac};

	return main::inrange($radio, $Radios{$other_mac});
}

package main;

#============================================================================
# Run simulation.
#============================================================================

if (@@ARGV) {
	$top->CmdLine;
	print "ARGV now ",join(' ',@@ARGV),"\n"
}

require "l2r.radio.pl";

&restart;

Tk::MainLoop();
@


1.12
log
@*** empty log message ***
@
text
@d9 1
a9 1
my $Version = '$Id: sim,v 1.11 2001/08/30 20:58:04 drew Exp drew $';
d21 1
d37 6
a42 1
	print "*" x 78, "\n", "@@_\n";
d44 3
a46 1
	die "@@_\n";
d58 15
a72 15
 my $top = shift;
 my $scroll = shift;
 my $f  = ($scroll) ? $top->Frame() : $top;
 my $e  = $f->Entry("-relief","ridge",@@_);
 $e->pack("-side"=>"top","-fill"=>"x","-expand"=>"yes");
 $e->bind("<Any-Enter>", sub { shift->focus() });
 $e->bind("<Any-FocusIn>",  sub { shift->configure("-relief" => "sunken") });
 $e->bind("<Any-FocusOut>", sub { shift->configure("-relief" => "ridge" ) });
 if ($scroll) {
   my $es = $f->Scrollbar(-orient=>"horizontal","-command",["view",$e], -width => '4m');
   $e->configure("-scrollcommand",["set",$es]);
   $es->pack("-side"=>"bottom","-fill"=>"x");
   $f->pack("-side","top");
  }
 return $e;
d100 17
a116 16
sub menubar {my $top  = shift;
 my $menu = $top->Menubar;
 my $file = $menu->Menubutton(-text => "File");

 $file->command(-label => "Save",    -command => \&dump_all);
 $file->separator;
 $file->command(-label => "Options", -command => \&options);
 $file->separator;
 $file->command(-label => "Quit",    -command => sub { exit });

 $file = $menu->Menubutton(-text => "Exceptions");

 $file->checkbutton(-label => 'Show messages', -variable => \&Show_messages);
 $file->separator;
 $file->command("-label","Busy","-command"  => \&MakeBusy,"-underline" => 0);
 $file->command("-label","Exit","-command"  => sub { exit 0 },"-underline" => 0);
d118 1
a118 1
 $menu->cascade(-label => 'Help', -underline => 0,
d120 2
a121 2
                             );
 return $menu;
d176 1
a176 1
&button($bf, -text => 'Exit', -command => sub { exit });
d179 2
a180 1
&button($bf, -text => 'Step', -command => \&cluster_step);
d182 1
a182 1
&button($bf, -text => 'Run', -command => \&run_all);
d211 2
a212 1
my %Radios;
d272 2
a273 2
		'A' => '#ffff00', 	# Aprentis yellow
		'B' => '#00ff00', 	# Bonds    green
d287 7
d295 1
a295 1
		my $master = $Radios{$unit->{master_mac}};
d298 2
a299 4
		$Battlefield->createOval($x-$range, $y-$range,
					 $x+$range, $y+$range,
					-outline => $color,
					-tags => $tag);
d304 19
a322 6
	} else {
		$Battlefield->createOval($x-$range, $y-$range,
					 $x+$range, $y+$range,
					-outline => $color,
					-tags => $tag);
		$l = undef;
d326 16
a341 11
		my($to);
		foreach $to (keys %{$unit->{bond}}) {
print "color bond $to\n";
#			$Battlefield->createLine($x, $y, unit_pos($to),
#					-fill => 'purple',
#					-arrow => 'last',
#					-tags => $tag);
		}
		my $master = $Radios{$unit->{master_mac}};
		$Battlefield->createLine($x, $y, unit_pos($master),
				-fill => $color, 
d344 1
a346 5
	$c = $Battlefield->createOval($x-2, $y-2, $x+2, $y+2, 
		-outline => $color, -tags => $tag);

	
	$top->update("idletasks") if $Visual_mode;
a361 2
my $Sequence = 1;

d367 1
a367 4
#	return if $unit->{sequence} == $Sequence;
#	$unit->{sequence} = $Sequence;

print "Transmit $frommac == $unit->{name} $msg\n";
d384 13
a396 1
my (@@Talk);
d398 11
a408 1
sub cluster_step {
d410 5
a414 1
	cluster_work();
d421 2
d425 1
a425 2
		++$Sequence;
		@@Talk = keys %Radios;
d432 2
a433 2
		$mac = pop @@Talk;
		$radio = $Radios{$mac};
d435 1
a435 1
		print "Tick $Sequence.$cnt\t$mac\n";
d438 55
a492 1
	print "-" x 79, "\n";
a513 15

sub cluster_all {
	my($i);

	print "=" x 79, "\n";

	$Battlefield->delete('messages');
	cluster_work();
	while (@@Talk) {
		cluster_work();
	}
	move_all();
	show_all();
}

a516 1
		$top->update("idletasks");
d527 1
d545 1
d562 3
a564 1
			$val = "$radio->{$key}";
d566 1
a567 11
			if ($val =~ /^ARRAY/) {
				foreach $key (@@{$radio->{$key}}) {
					print F " $key";
				}
			}
			if ($val =~ /^HASH/) {
				foreach $key (%{$radio->{$key}}) {
					print F " $key";
				}
			}
		}
d573 23
d599 1
a599 1
	main::say(@@_);
d604 3
@


1.11
log
@*** empty log message ***
@
text
@d9 1
a9 1
my $Version = '$Id:$';
d35 1
d94 3
a96 5
 my $file = $menu->Menubutton("-text" => "File","-underline" => 0, -bg => 'ivory',
            -tearoff => 0
           );
 $file->command("-label","Save","-command" => sub { print "Save\n" },"-underline" => 0);
 $file->command("-label","Delete","-command" => sub { print "Delete\n" },"-underline" => 0);
d98 1
a98 1
 $file->command("-label","Options","-command" => \&options,"-underline" => 0);
d100 1
a100 1
 $file->command("-label","Quit","-command" => sub { exit },"-underline" => 0);
d102 1
a102 1
 $file = $menu->Menubutton(-text => "Exceptions",  -underline => 0);
a107 3
 $file->command("-label","Trace","-command" => \&back_trace,"-underline" => 0);
 $file->command("-label","Wrong","-command" => sub { $top->configure(-gibberish => 'junk') });
 $file->command("-label","Send","-command"  => [\&send_test,$top] );
d280 1
a280 1
		$o = $Battlefield->createOval($x-$range, $y-$range,
d284 1
a284 1
		$l = $Battlefield->createLine($x, $y, unit_pos($master),
d289 1
a289 1
		$o = $Battlefield->createOval($x-$range, $y-$range,
d295 17
a315 2
	$unit->{visual} = [ $c, $o, $l ];

d337 1
d342 1
a342 1
print "Transmit $unit->{mac} == $unit->{name} $msg\n";
d346 1
a346 1
		next if $unit->{mac} eq  $other->{mac};
d354 1
a354 1
		$other->receive($mac, $msg);
d379 1
d383 1
a383 1
		print "Tick $Sequence.$cnt\t$mac";
d413 2
d448 2
d456 31
@


1.10
log
@*** empty log message ***
@
text
@d1 1
a1 1
#!/usr/bin/perl
d4 1
d8 3
d24 8
a31 7
sub test_back_trace {
 my ($w,$count) = @@_;
 if ($count) {
   test_back_trace($w,$count-1);
  } else {
   $w->BackTrace("Moan");
  }
d34 4
a37 7
sub back_trace {
 my @@info;
 my $i = 0;
 while (@@info = caller($i)) {
   print "$i: ",join(' ',@@info),"\n";
   $i++;
  }
d41 5
a45 4
 my ($w) = @@_;
 my $result = eval { $w->send('basic_demo',"Hi there") };
 die "Send failed '$@@'" if ($@@);
 print "Send returned '$result'\n";
d67 1
a67 1
 return shift->Button(@@_)->pack(-side => 'left');
d71 4
a74 4
 my $top = shift;
 my $b = $top->Checkbutton(@@_);
 $b->pack(-side => 'left');
 return $b;
d78 4
a81 4
 my $top = shift;
 my $b = $top->Radiobutton(@@_);
 $b->pack(-side => 'left');
 return $b;
d85 4
a88 4
 my $top = shift;
 my $w = $top->Label((@@_) ? @@_ : ('-text' => "A Label") );
 $w->pack("-side"=>"bottom","-fill"=>"x");
 return $w;
a108 2
 $file->command("-label","Close","-command" => sub { close Gibberish },"-underline" => 0);
 $file->command("-label","Moan","-command"  => [ \&test_back_trace, $menu, 3 ],"-underline" => 0);
d119 1
a119 10
sub popdown {
 my $w = shift;
 my $top = $w->MainWindow;
 $top->configure("-cursor"=> $w->{Cursor});
 $w->grab("release");
 $w->withdraw;
}


$top = MainWindow->new();
d126 1
a126 1
            sub {
d130 2
a131 2
                }
          );
d133 1
a133 1
$camel   = $top->Photo(-format => 'gif', -file => Tk->findINC("Xcamel.gif"));
d176 1
a204 10
if ($^O ne 'MSWin32') {
  if (open(Gibberish, '<&STDIN')) {
    $top->fileevent(Gibberish,'readable',
        [sub { my ($fh) = @@_; print "stdin:",scalar <$fh> },\*Gibberish]);
   }
  else {
    warn "Cannot open /dev/tty:$!";
   }
 }

d227 1
a227 17
	$t = MainWindow->new();

	get_value($t, 'Width', \$Width);
	get_value($t, 'Range', \$Range);
	get_value($t, 'Units', \$Units);
	get_value($t, 'Scale', \$Scale);
	get_value($t, 'Visual', \$Visual_mode);
}

sub new_radio {
	my($n, $x, $y) = @@_; 

	$Radios{$n}->{name} = $n;
	$Radios{$n}->{x} = rand($Width);
	$Radios{$n}->{y} = rand($Width);
	$Radios{$n}->{status} = 'F';
}
d229 5
a233 38
sub set {
	my($i, $state, $msg) = @@_;

	$i->{status} = $state if $state ne '.';

	print "Set $i->{name} -> $state say: $msg\n";

	say($i, $msg) if $msg ne '.';
}

sub hear {
	my($i, $n, $msg) = @@_;
	my($id);

	print "hear $i->{name} from $n->{name} msg: $msg\n";

	# FSBM
	$id = $i->{status} .  $n->{status};

	set($i, '.', 'M') if $id eq 'FF';
	set($i, '.', 'B') if $id eq 'FS';
	set($i, '.', 'B') if $id eq 'FB';
	set($i, '.', 'M') if $id eq 'FM';

	set($i, '.', 'B') if $id eq 'SF';
	set($i, '.', '.') if $id eq 'SS';
	set($i, '.', 'M') if $id eq 'SB';
	set($i, '.', '.') if $id eq 'SM';

	set($i, 'M', 'S') if $id eq 'BF';
	set($i, 'M', '.') if $id eq 'BS';
	set($i, '.', '.') if $id eq 'BB';
	set($i, '.', '.') if $id eq 'BM';

	set($i, 'M', 'S') if $id eq 'MF';
	set($i, 'M', 'S') if $id eq 'MS';
	set($i, 'M', 'B') if $id eq 'MB';
	set($i, 'M', 'S') if $id eq 'MM';
d253 1
a253 1
	my($i) = @@_;
d255 2
a256 2
	$Battlefield->delete("u$i");
	delete $Radios{$i};
d260 1
a260 2
	my($n) = @@_; 
	my($unit) = $Radios{$n};
d274 2
a275 1
	my($tag) = "u$n";
d281 2
a282 1
		$master = $Radios{$unit->{master}};
d311 2
d321 1
a321 1
my $Sequence;
d325 1
a325 1
	my($i, $other);
d327 2
a328 2
	return if $unit->{sequence} == $Sequence;
	$unit->{sequence} = $Sequence;
d330 3
a332 3
print "Say $unit->{name} $msg\n";
	foreach $i (keys %Radios) {
		$other = $Radios{$i};
d334 1
a334 2
		next if $unit->{name} eq  $other->{name};
		next if $unit->{status} eq 'S';
d341 2
a342 1
		hear($unit, $other, $msg);
d350 4
a353 1
	my($noshow) = @@_; 
d355 5
a359 1
	if (@@Talk == 0) {
d362 1
a364 2
	$Battlefield->delete('messages');

d367 26
a392 2
		print "Step $Sequence Iam $Talk[0]\n";
		say($Radios{pop @@Talk}, 'I');
a393 1
	show_all() unless $noshow;
d399 2
a400 1
	cluster_step(1);
d402 1
a402 1
		cluster_step(1);
d404 1
d408 5
a412 3
sub show_all {
	foreach $i (keys %Radios) {
		show_radio($i);
d416 2
a417 3
#============================================================================
# Build Canvas
#============================================================================
d419 4
a422 4
if (@@ARGV) {
  $top->CmdLine;
  print "ARGV now ",join(' ',@@ARGV),"\n"
 }
d424 2
a425 1
&restart;
a426 1
sub restart {
d429 2
a430 2
	foreach $i (sort keys %Radios) {
		delete_radio($i);
d432 1
d434 3
a436 1
		new_radio($i);
d440 28
a467 1
	
@


1.9
log
@*** empty log message ***
@
text
@d263 1
a263 1
	my($i, $n, $ir, $nr) = @@_;
d265 1
a265 2
	$i->{status} = $ir if $ir ne '.';
	$n->{status} = $nr if $nr ne '.';
d267 1
a267 6
	if ($ir eq 'M') {
		$n->{master} = $i->{name};
	}
	if ($nr eq 'M') {
		$i->{master} = $n->{name};
	}
d269 1
a269 1
	print "Set $i->{name} -> $ir, $n->{name} -> $nr\n";
d273 1
a273 1
	my($me, $from) = @@_;
d276 3
a278 1
	# FASBM
d281 19
a299 29
	set($i, $n, 'A', 'A') if $id eq 'FF';
	set($i, $n, 'S', 'M') if $id eq 'FA';
	set($i, $n, 'B', 'S') if $id eq 'FS';
	set($i, $n, 'M', 'S') if $id eq 'FB';
	set($i, $n, 'S', 'M') if $id eq 'FM';

	set($i, $n, 'M', 'S') if $id eq 'AF';
	set($i, $n, 'M', 'S') if $id eq 'AA';
	set($i, $n, 'M', 'S') if $id eq 'AS';
	set($i, $n, 'M', '.') if $id eq 'AB';
	set($i, $n, 'B', '.') if $id eq 'AM';

	set($i, $n, '.', 'A') if $id eq 'SF';
	set($i, $n, '.', 'M') if $id eq 'SA';
	set($i, $n, '.', '.') if $id eq 'SS';
	set($i, $n, '.', '.') if $id eq 'SB';
	set($i, $n, '.', '.') if $id eq 'SM';

	set($i, $n, '.', 'M') if $id eq 'BF';
	set($i, $n, '.', 'M') if $id eq 'BA';
	set($i, $n, '.', '.') if $id eq 'BS';
	set($i, $n, '.', '.') if $id eq 'BB';
	set($i, $n, '.', '.') if $id eq 'BM';

	set($i, $n, 'M', 'S') if $id eq 'MF';
	set($i, $n, 'M', 'S') if $id eq 'MA';
	set($i, $n, 'M', 'S') if $id eq 'MS';
	set($i, $n, 'M', 'B') if $id eq 'MB';
	set($i, $n, 'M', 'B') if $id eq 'MM';
d314 2
a315 1
	return sqrt($dx*$dx + $dy*$dy) < ($Range/2);
d384 2
d387 1
a387 1
	my($unit) = @@_;
d390 4
d405 1
a405 1
		hear($unit, $other);
d413 2
d416 1
d423 5
a427 2
	say($Radios{pop @@Talk});
	show_all();
d433 1
a433 3
	if (@@Talk == 0) {
		@@Talk = keys %Radios;
	}
d435 1
a435 1
		say($Radios{pop @@Talk});
d458 2
@


1.8
log
@*** empty log message ***
@
text
@d15 3
d102 2
d180 1
d184 4
a188 1

d225 1
a225 1
my $Width = 2_000;
d227 2
a228 2
my $Units = 150;
my $Scale = 5;
d250 1
d279 1
a279 1
	my($i, $n) = @@_;
d351 2
a352 2
	my($x) = $unit->{x} / $Scale;
	my($y) = $unit->{y} / $Scale;
a360 2
		my($mx) = $master->{x} / $Scale;
		my($my) = $master->{y} / $Scale;
d366 1
a366 1
		$l = $Battlefield->createLine($x, $y, $mx, $my, 
d382 13
d404 1
a404 1
		next if $unit->{name} eq  $other->{$name};
d409 3
d413 1
d423 4
@


1.7
log
@*** empty log message ***
@
text
@a240 1
	get_value($t, 'Width', \$Width);
@


1.6
log
@*** empty log message ***
@
text
@d322 7
d332 1
d341 1
d346 1
d355 1
a355 1
		$Battlefield->createOval($x-$range, $y-$range,
d359 1
a359 1
		$Battlefield->createLine($x, $y, $mx, $my, 
d364 1
a364 1
		$Battlefield->createOval($x-$range, $y-$range,
d368 1
d370 1
a370 1
	$Battlefield->createOval($x-2, $y-2, $x+2, $y+2, 
d372 3
d433 3
@


1.5
log
@*** empty log message ***
@
text
@d176 1
d190 11
a212 9
#============================================================================
# Battlefield tools
#============================================================================
my $Battlefield = $top->Scrolled('Canvas',
	-height => 600, -width =>900,
#	-fillx => 1, -filly => 1
	)->pack(
	-side => 'right', -fill => 'both', -expand => 1);

d379 10
d392 5
a396 2
	foreach $i (keys %Radios) {
		say($Radios{$i});
d398 4
d416 7
a422 2
foreach $i (1..$Units) {
	new_radio($i);
a423 2

cluster_all();
a424 2
#$Battlefield->configure(-scrollregion => $Battlefield->bbox('all'));

@


1.4
log
@*** empty log message ***
@
text
@a167 2
$oil  = 1;

d186 1
a186 1
	print "+ $cmd\n";
@


1.3
log
@*** empty log message ***
@
text
@d93 2
a96 12
 $file = $menu->Menubutton(-text => "Options", -underline => 0, -font => 'fixed');

 $file->checkbutton('-label' => 'Strict ~Motif', '-variable' => 'Tk::strictMotif');

 $file->separator;
 $file->checkbutton('-label' => 'Oil checked', '-variable' => 'main::oil');
 $file->checkbutton('-label' => 'Water checked', '-variable' => \$Water);
 my $om = $file->cget('-menu');
 $om->bind('<ButtonRelease-1>',[ sub {my ($b,$arg,$orig) = @@_; print "Hey ",join(' ',map($_->PathName,$b,$arg),$orig),"\n";}, $om, $om->PathName] );
 $file->command("-label","Interps", "-underline" => 0,
   "-command"  =>  sub { print 'Interps(',join(',',$file->interps),")\n" } );

a106 8
 $menu->separator;

 $menu->cascade(-label => 'Other', -underline => 1,
                              -menuitems => [[ Command => '~Busy',
                               -command => \&MakeBusy]]
                             );


d108 1
a108 1
                              -menuitems => [[ Command => '~Versions', -command => [\&ShowVersion, $top ]]]
a121 16
sub dialogue {my $top = shift;
 my $t = $top->Toplevel("-class","Dialogue",
               # -screen => $ENV{'DISPLAY'}
               );
 my $l = &label($t,@@_);
 my $b = &button($t,"-text","OK","-command"=>[ \&popdown ,$t]);
 $t->wm("group",$top);
 $t->wm("transient",$top);
 $t->wm("withdraw");
 $t->wm("minsize",0,0);
 $l->pack("-side"=> "top", "-expand" => 1, "-fill" => "both");
 $b->pack("-side"=> "bottom");
 $t->wm("protocol","WM_DELETE_WINDOW",[\&popdown,$t]);
 return $t;
}

d140 11
a150 7
sub ShowVersion {my ($top) = @@_;
 my $d = $top->Dialog(-title => 'Versions',
                      -popover => $top,
                      -image => $camel,
                      -fg  => '#800000',
                      -text =>
"Core Tk version : $Tk::version
d153 4
a156 2
perl/Tk Version : $Tk::VERSION\n",-justify => 'center');
 $d->Show;
d158 1
d160 6
a165 6
 $top->Busy(-recurse => 1);
 warn "Waiting\n";
 my $done = 0;
 $top->after(6000, sub { $done = 1; warn "Fired\n" });
 Tk::DoOneEvent(0) until ($done);
 $top->Unbusy
a167 2

$fred = "Initial Text";
a168 1
my $bl = $top->Balloon;
d172 3
d176 8
d185 2
a186 3
my $q = &button($bf,"-image",$QuitPB,"-activeimage",$QuitPBa,
        "-command", sub { exit });
$bl->attach($q, -msg => "Exit Application");
d188 2
a189 11
&button($bf,"-text","Cluster","-command", \&cluster_all);

$main::Water = 1;

$entry = &entry($top,0,"-width","30","-textvariable",\$fred);

&label($top,"-bitmap"=>"info");

$top->Icon(-image => $camel);

$top->property("set",MYPROP,AREA,32,[1,2,3,4,5]);
d219 23
@


1.2
log
@*** empty log message ***
@
text
@a16 7
sub showbinding {
 my $w = shift;
 foreach ($w->bind()) {
   print "$w $_ = ",$w->bind($_),"\n";
  }
}

a128 17
}

sub entry_check {
 my ($i);
 for ($i = 0; $i < $entry->width; $i++) {
   my $cur = $entry->index('@@'.$i);
   print "$i => $cur\n";
  }
}

sub popup {my $w = shift;
 my $top = $w->MainWindow;
 $w->{Cursor} = $top->cget("-cursor");
 $top->configure("-cursor"=>"watch");
 $w->Popup(-popover => $top, -popanchor => 'c', -overanchor => 'c');
 $w->update;
 $w->grab;
@


1.1
log
@Initial revision
@
text
@a14 1

a66 14
sub listbox {
 my $top = shift;
 my $l = $top->ScrlListbox("-selectmode"=>"extended",-label => 'Listbox',-takefocus => 1);
 $l->pack("-side","top","-fill","both","-expand","yes");
 return $l;
}

sub listadd {
	my $list = shift;
	foreach (@@_) {
		$l->insert("end", $_);
	}
}

d210 8
a227 18
my $bigfont = "-Adobe-Helvetica-Medium-R-Normal--*-180-*-*-*-*-*-*";

my $om = $bf->Optionmenu(-textvariable => \$option, -font => $bigfont,
                 -options => [qw(one two three four)],
                 -command => sub { print "Optionmenu set to: ",shift,"\n"}
                )->pack(-side => 'right');

my $f = $om->cget('-font');
my $ps;
my $sz = $f->PostscriptFontName($ps);
print "Font is $f $$f $ps ($sz)\n";

my $be = $bf->BrowseEntry(-variable => \$option )->pack(-side => 'right');
$be->insert('end',qw(one two three four));

$QuitPB  = $top->Pixmap('-file' => Tk->findINC("demos/images/QuitPB.xpm"));
$QuitPBa = $top->Pixmap('-file' => Tk->findINC("demos/images/QuitPBa.xpm"));

a233 9
&checkbutton($bf,"-text","oil","-variable",\$oil,-command => \&MakeBusy);
&checkbutton($bf,"-text","water","-variable",main::Water);
&radiobutton($bf,"-text","one","-variable",\$option,"-value"=>"one",-command => \&MakeBusy);
&radiobutton($bf,"-text","two","-variable",\$option,"-value"=>"two");
&radiobutton($bf,"-text","three","-variable",\$option,"-value"=>"three");
&button($bf,"-text","State","-command",
         sub {print "water=$main::Water oil=$oil option=$option\n"});
&button($bf,"-text","Chop","-command", sub { chop($fred) });

a239 11
$l = &listbox($top);

sub MakeBusy {
 $top->Busy(-recurse => 1);
 warn "Waiting\n";
 my $done = 0;
 $top->after(6000, sub { $done = 1; warn "Fired\n" });
 Tk::DoOneEvent(0) until ($done);
 $top->Unbusy
}

d259 2
a260 3
my $Simwin = MainWindow->new();
my $Battlefield = $Simwin->Scrolled('Canvas',
	-height => 700, -width =>900,
d263 1
a263 1
	-side => 'left', -fill => 'both', -expand => 1);
a427 1

a429 1
	listadd($l, "Radio $i");
@
