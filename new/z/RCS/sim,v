head	1.9;
access;
symbols;
locks
	drew:1.9; strict;
comment	@# @;


1.9
date	2001.08.23.21.07.59;	author drew;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.23.20.17.49;	author drew;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.23.20.17.26;	author drew;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.23.20.11.00;	author drew;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.23.19.58.24;	author drew;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.23.19.57.48;	author drew;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.23.19.16.01;	author drew;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.23.19.14.01;	author drew;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.23.19.13.55;	author drew;	state Exp;
branches;
next	;


desc
@@


1.9
log
@*** empty log message ***
@
text
@#!/usr/bin/perl

use Carp;

$SIG{__DIE__} = \&Carp::confess;


use Tk qw(exit);
# use Tk::Xrm;

use Tk::widgets qw(Button Label Menu Photo Optionmenu Pixmap Balloon);
use Tk::widgets qw(Scrollbar Checkbutton Radiobutton Entry
                   Message BrowseEntry Listbox);

my $Show_messages = 1;
my $In_range = 0;

use Config;

sub test_back_trace {
 my ($w,$count) = @@_;
 if ($count) {
   test_back_trace($w,$count-1);
  } else {
   $w->BackTrace("Moan");
  }
}

sub back_trace {
 my @@info;
 my $i = 0;
 while (@@info = caller($i)) {
   print "$i: ",join(' ',@@info),"\n";
   $i++;
  }
}

sub send_test {
 my ($w) = @@_;
 my $result = eval { $w->send('basic_demo',"Hi there") };
 die "Send failed '$@@'" if ($@@);
 print "Send returned '$result'\n";
}

sub entry {
 my $top = shift;
 my $scroll = shift;
 my $f  = ($scroll) ? $top->Frame() : $top;
 my $e  = $f->Entry("-relief","ridge",@@_);
 $e->pack("-side"=>"top","-fill"=>"x","-expand"=>"yes");
 $e->bind("<Any-Enter>", sub { shift->focus() });
 $e->bind("<Any-FocusIn>",  sub { shift->configure("-relief" => "sunken") });
 $e->bind("<Any-FocusOut>", sub { shift->configure("-relief" => "ridge" ) });
 if ($scroll) {
   my $es = $f->Scrollbar(-orient=>"horizontal","-command",["view",$e], -width => '4m');
   $e->configure("-scrollcommand",["set",$es]);
   $es->pack("-side"=>"bottom","-fill"=>"x");
   $f->pack("-side","top");
  }
 return $e;
}

sub button {
 return shift->Button(@@_)->pack(-side => 'left');
}

sub checkbutton {
 my $top = shift;
 my $b = $top->Checkbutton(@@_);
 $b->pack(-side => 'left');
 return $b;
}

sub radiobutton {
 my $top = shift;
 my $b = $top->Radiobutton(@@_);
 $b->pack(-side => 'left');
 return $b;
}

sub label {
 my $top = shift;
 my $w = $top->Label((@@_) ? @@_ : ('-text' => "A Label") );
 $w->pack("-side"=>"bottom","-fill"=>"x");
 return $w;
}

sub menubar {my $top  = shift;
 my $menu = $top->Menubar;
 my $file = $menu->Menubutton("-text" => "File","-underline" => 0, -bg => 'ivory',
            -tearoff => 0
           );
 $file->command("-label","Save","-command" => sub { print "Save\n" },"-underline" => 0);
 $file->command("-label","Delete","-command" => sub { print "Delete\n" },"-underline" => 0);
 $file->separator;
 $file->command("-label","Options","-command" => \&options,"-underline" => 0);
 $file->separator;
 $file->command("-label","Quit","-command" => sub { exit },"-underline" => 0);

 $file = $menu->Menubutton(-text => "Exceptions",  -underline => 0);

 $file->checkbutton(-label => 'Show messages', -variable => \&Show_messages);
 $file->separator;
 $file->command("-label","Busy","-command"  => \&MakeBusy,"-underline" => 0);
 $file->command("-label","Exit","-command"  => sub { exit 0 },"-underline" => 0);
 $file->command("-label","Close","-command" => sub { close Gibberish },"-underline" => 0);
 $file->command("-label","Moan","-command"  => [ \&test_back_trace, $menu, 3 ],"-underline" => 0);
 $file->command("-label","Trace","-command" => \&back_trace,"-underline" => 0);
 $file->command("-label","Wrong","-command" => sub { $top->configure(-gibberish => 'junk') });
 $file->command("-label","Send","-command"  => [\&send_test,$top] );

 $menu->cascade(-label => 'Help', -underline => 0,
	      -menuitems => [[ Command => '~Versions', -command => [\&ShowVersion, $top ]]]
                             );
 return $menu;
}

sub popdown {
 my $w = shift;
 my $top = $w->MainWindow;
 $top->configure("-cursor"=> $w->{Cursor});
 $w->grab("release");
 $w->withdraw;
}


$top = MainWindow->new();

$top->optionAdd($top->Name.'*Dialog*Background', 'yellow');

$Tk::_mw_ = $top;

$top->bind('MainWindow','<Map>',
            sub {
                 printf "Mapped %.3g Sec. after bootstrap (u=%.3g s=%.3g)\n",Tk::Time_So_Far,times;
                 printf("%gK\n",Memory->used/1024) if (defined &Memory::used);
                 system("/bin/ps","-o",'vsz,osz,rss,pmem,time','-p',$$) if ($^O eq 'solaris');
                }
          );

$camel   = $top->Photo(-format => 'gif', -file => Tk->findINC("Xcamel.gif"));

# print "camel is ",$camel->width," wide\n";

sub ShowVersion {
	my $top = @@_;
	my $d = $top->Dialog(
		-title => 'Versions',
		-popover => $top,
		-image => $camel,
		-fg  => '#800000',
		-justify => 'center',
		-text => <<"EOF",
"Radio Simulator $Version
Core Tk version : $Tk::version
Tk patchLevel : $Tk::patchLevel
library : $Tk::library
perl/Tk Version : $Tk::VERSION
EOF
	);
	$d->Show;
}

sub MakeBusy {
	$top->Busy(-recurse => 1);
	warn "Waiting\n";
	my $done = 0;
	$top->after(6000, sub { $done = 1; warn "Fired\n" });
	Tk::DoOneEvent(0) until ($done);
	$top->Unbusy
}

&menubar($top);

#---------------------------------------------------------------------------
# Button Bar
#---------------------------------------------------------------------------
my $bf = $top->Frame->pack(-fill => 'x');
&button($bf, -text => 'Exit', -command => sub { exit });
&button($bf, -text => 'Options', -command => \&options);
&button($bf, -text => 'Restart', -command => \&restart);
&button($bf, -text => 'Step', -command => \&cluster_step);
&button($bf, -text => 'Cluster', -command => \&cluster_all);

$bf->Entry(-textvariable => \$In_range)->pack(-side => 'right');
$bf->Label(-text => 'In Range')->pack(-side => 'right');

#---------------------------------------------------------------------------
my $Command = "";
$bf->Button(-text => 'Go', -command => [ \&command, \$Command ])->pack(-side => 'right');
$bf->Entry(-textvariable =>\$Command)->pack(-side =>'left', -fill => 'x');

sub command {
	my($cmd) = @@_;

	print "+ $$cmd\n";
}


#============================================================================
# Battlefield tools
#============================================================================
my $Battlefield = $top->Scrolled('Canvas',
	-height => 600, -width =>900,
#	-fillx => 1, -filly => 1
	)->pack(
	-side => 'right', -fill => 'both', -expand => 1);


$top->update("idletasks");

if ($^O ne 'MSWin32') {
  if (open(Gibberish, '<&STDIN')) {
    $top->fileevent(Gibberish,'readable',
        [sub { my ($fh) = @@_; print "stdin:",scalar <$fh> },\*Gibberish]);
   }
  else {
    warn "Cannot open /dev/tty:$!";
   }
 }

my %Radios;

#my $Width = 20_000;
my $Width = 1_000;
my $Range = 500;
my $Units = 15;
my $Scale = 3;

sub get_value {
	my($w, $text, $refvar) = @@_;

	my $f = $w->Frame();
	my $l = $f->Label(-text => $text);
	 $l->pack(-side => "left");

	my $t = $f->Entry(-textvariable => $refvar)->pack(
		-side => 'right', -fill => 'x');

	$f->pack(-fill => 'x', -side => 'top');
}

sub options {
	$t = MainWindow->new();

	get_value($t, 'Width', \$Width);
	get_value($t, 'Range', \$Range);
	get_value($t, 'Units', \$Units);
	get_value($t, 'Scale', \$Scale);
	get_value($t, 'Visual', \$Visual_mode);
}

sub new_radio {
	my($n, $x, $y) = @@_; 

	$Radios{$n}->{name} = $n;
	$Radios{$n}->{x} = rand($Width);
	$Radios{$n}->{y} = rand($Width);
	$Radios{$n}->{status} = 'F';
}

sub set {
	my($i, $n, $ir, $nr) = @@_;

	$i->{status} = $ir if $ir ne '.';
	$n->{status} = $nr if $nr ne '.';

	if ($ir eq 'M') {
		$n->{master} = $i->{name};
	}
	if ($nr eq 'M') {
		$i->{master} = $n->{name};
	}

	print "Set $i->{name} -> $ir, $n->{name} -> $nr\n";
}

sub hear {
	my($me, $from) = @@_;
	my($id);

	# FASBM
	$id = $i->{status} .  $n->{status};

	set($i, $n, 'A', 'A') if $id eq 'FF';
	set($i, $n, 'S', 'M') if $id eq 'FA';
	set($i, $n, 'B', 'S') if $id eq 'FS';
	set($i, $n, 'M', 'S') if $id eq 'FB';
	set($i, $n, 'S', 'M') if $id eq 'FM';

	set($i, $n, 'M', 'S') if $id eq 'AF';
	set($i, $n, 'M', 'S') if $id eq 'AA';
	set($i, $n, 'M', 'S') if $id eq 'AS';
	set($i, $n, 'M', '.') if $id eq 'AB';
	set($i, $n, 'B', '.') if $id eq 'AM';

	set($i, $n, '.', 'A') if $id eq 'SF';
	set($i, $n, '.', 'M') if $id eq 'SA';
	set($i, $n, '.', '.') if $id eq 'SS';
	set($i, $n, '.', '.') if $id eq 'SB';
	set($i, $n, '.', '.') if $id eq 'SM';

	set($i, $n, '.', 'M') if $id eq 'BF';
	set($i, $n, '.', 'M') if $id eq 'BA';
	set($i, $n, '.', '.') if $id eq 'BS';
	set($i, $n, '.', '.') if $id eq 'BB';
	set($i, $n, '.', '.') if $id eq 'BM';

	set($i, $n, 'M', 'S') if $id eq 'MF';
	set($i, $n, 'M', 'S') if $id eq 'MA';
	set($i, $n, 'M', 'S') if $id eq 'MS';
	set($i, $n, 'M', 'B') if $id eq 'MB';
	set($i, $n, 'M', 'B') if $id eq 'MM';
}

sub inrange {
	my($a, $b) = @@_;

	my $ax = $a->{x};
	my $ay = $a->{y};

	my $bx = $b->{x};
	my $by = $b->{y};

	my $dx = abs($ax - $bx);
	my $dy = abs($ay - $by);

	return sqrt($dx*$dx + $dy*$dy) < ($Range/2);
}

sub delete_radio {
	my($i) = @@_;

	$Battlefield->delete("u$i");
	delete $Radios{$i};
}

sub show_radio {
	my($n) = @@_; 
	my($unit) = $Radios{$n};
	my($c, $o, $l);

	my(%Color) = (
		'M' => '#ff0000', 	# Master   red
		'A' => '#ffff00', 	# Aprentis yellow
		'B' => '#00ff00', 	# Bonds    green
		'S' => '#00ffff', 	# Slaves   cyan
		'F' => '#0000ff');	# Freemen  blue


	my($x, $y) = unit_pos($unit);

	my($range) = $Range / $Scale / 2;
	my($tag) = "u$n";
	$Battlefield->delete($tag);

	my($color) = $Color{$unit->{status}};

	if ($unit->{status} eq 'S') {
		$master = $Radios{$unit->{master}};

		$o = $Battlefield->createOval($x-$range, $y-$range,
					 $x+$range, $y+$range,
					-outline => $color,
					-tags => $tag);
		$l = $Battlefield->createLine($x, $y, unit_pos($master),
				-fill => $color, 
				-arrow => 'last',
				-tags => $tag);
	} else {
		$o = $Battlefield->createOval($x-$range, $y-$range,
					 $x+$range, $y+$range,
					-outline => $color,
					-tags => $tag);
		$l = undef;
	}
	$c = $Battlefield->createOval($x-2, $y-2, $x+2, $y+2, 
		-outline => $color, -tags => $tag);

	
	$unit->{visual} = [ $c, $o, $l ];

	$top->update("idletasks") if $Visual_mode;
}

sub unit_pos {
	my($unit) = @@_;

	my($x) = int($unit->{x} / $Scale);
	my($y) = int($unit->{y} / $Scale);

	print "$unit->{name} = $x, $y\n" if $Debug;

	return ($x, $y);
}

sub say {
	my($unit) = @@_;
	my($i, $other);
	
	foreach $i (keys %Radios) {
		$other = $Radios{$i};

		next if $unit->{name} eq  $other->{name};
		next if $unit->{status} eq 'S';

		next unless inrange($unit, $other);

		$Battlefield->createLine(unit_pos($unit), unit_pos($other),
				-arrow => 'last',
				-tags => 'messages');
		hear($unit, $other);
		++$In_range;
	}
}

my (@@Talk);

sub cluster_step {
	if (@@Talk == 0) {
		@@Talk = keys %Radios;
	}
	
	$Battlefield->delete('messages');

	$In_range = 0;
	say($Radios{pop @@Talk});
	show_all();
}

sub cluster_all {
	my($i);

	if (@@Talk == 0) {
		@@Talk = keys %Radios;
	}
	while (@@Talk) {
		say($Radios{pop @@Talk});
	}
	show_all();
}

sub show_all {
	foreach $i (keys %Radios) {
		show_radio($i);
	}
}

#============================================================================
# Build Canvas
#============================================================================

if (@@ARGV) {
  $top->CmdLine;
  print "ARGV now ",join(' ',@@ARGV),"\n"
 }

&restart;

sub restart {
	foreach $i (sort keys %Radios) {
		delete_radio($i);
	}
	foreach $i (1..$Units) {
		new_radio($i);
	}
	show_all();
}
	
Tk::MainLoop();
@


1.8
log
@*** empty log message ***
@
text
@d15 3
d102 2
d180 1
d184 4
a188 1

d225 1
a225 1
my $Width = 2_000;
d227 2
a228 2
my $Units = 150;
my $Scale = 5;
d250 1
d279 1
a279 1
	my($i, $n) = @@_;
d351 2
a352 2
	my($x) = $unit->{x} / $Scale;
	my($y) = $unit->{y} / $Scale;
a360 2
		my($mx) = $master->{x} / $Scale;
		my($my) = $master->{y} / $Scale;
d366 1
a366 1
		$l = $Battlefield->createLine($x, $y, $mx, $my, 
d382 13
d404 1
a404 1
		next if $unit->{name} eq  $other->{$name};
d409 3
d413 1
d423 4
@


1.7
log
@*** empty log message ***
@
text
@a240 1
	get_value($t, 'Width', \$Width);
@


1.6
log
@*** empty log message ***
@
text
@d322 7
d332 1
d341 1
d346 1
d355 1
a355 1
		$Battlefield->createOval($x-$range, $y-$range,
d359 1
a359 1
		$Battlefield->createLine($x, $y, $mx, $my, 
d364 1
a364 1
		$Battlefield->createOval($x-$range, $y-$range,
d368 1
d370 1
a370 1
	$Battlefield->createOval($x-2, $y-2, $x+2, $y+2, 
d372 3
d433 3
@


1.5
log
@*** empty log message ***
@
text
@d176 1
d190 11
a212 9
#============================================================================
# Battlefield tools
#============================================================================
my $Battlefield = $top->Scrolled('Canvas',
	-height => 600, -width =>900,
#	-fillx => 1, -filly => 1
	)->pack(
	-side => 'right', -fill => 'both', -expand => 1);

d379 10
d392 5
a396 2
	foreach $i (keys %Radios) {
		say($Radios{$i});
d398 4
d416 7
a422 2
foreach $i (1..$Units) {
	new_radio($i);
a423 2

cluster_all();
a424 2
#$Battlefield->configure(-scrollregion => $Battlefield->bbox('all'));

@


1.4
log
@*** empty log message ***
@
text
@a167 2
$oil  = 1;

d186 1
a186 1
	print "+ $cmd\n";
@


1.3
log
@*** empty log message ***
@
text
@d93 2
a96 12
 $file = $menu->Menubutton(-text => "Options", -underline => 0, -font => 'fixed');

 $file->checkbutton('-label' => 'Strict ~Motif', '-variable' => 'Tk::strictMotif');

 $file->separator;
 $file->checkbutton('-label' => 'Oil checked', '-variable' => 'main::oil');
 $file->checkbutton('-label' => 'Water checked', '-variable' => \$Water);
 my $om = $file->cget('-menu');
 $om->bind('<ButtonRelease-1>',[ sub {my ($b,$arg,$orig) = @@_; print "Hey ",join(' ',map($_->PathName,$b,$arg),$orig),"\n";}, $om, $om->PathName] );
 $file->command("-label","Interps", "-underline" => 0,
   "-command"  =>  sub { print 'Interps(',join(',',$file->interps),")\n" } );

a106 8
 $menu->separator;

 $menu->cascade(-label => 'Other', -underline => 1,
                              -menuitems => [[ Command => '~Busy',
                               -command => \&MakeBusy]]
                             );


d108 1
a108 1
                              -menuitems => [[ Command => '~Versions', -command => [\&ShowVersion, $top ]]]
a121 16
sub dialogue {my $top = shift;
 my $t = $top->Toplevel("-class","Dialogue",
               # -screen => $ENV{'DISPLAY'}
               );
 my $l = &label($t,@@_);
 my $b = &button($t,"-text","OK","-command"=>[ \&popdown ,$t]);
 $t->wm("group",$top);
 $t->wm("transient",$top);
 $t->wm("withdraw");
 $t->wm("minsize",0,0);
 $l->pack("-side"=> "top", "-expand" => 1, "-fill" => "both");
 $b->pack("-side"=> "bottom");
 $t->wm("protocol","WM_DELETE_WINDOW",[\&popdown,$t]);
 return $t;
}

d140 11
a150 7
sub ShowVersion {my ($top) = @@_;
 my $d = $top->Dialog(-title => 'Versions',
                      -popover => $top,
                      -image => $camel,
                      -fg  => '#800000',
                      -text =>
"Core Tk version : $Tk::version
d153 4
a156 2
perl/Tk Version : $Tk::VERSION\n",-justify => 'center');
 $d->Show;
d158 1
d160 6
a165 6
 $top->Busy(-recurse => 1);
 warn "Waiting\n";
 my $done = 0;
 $top->after(6000, sub { $done = 1; warn "Fired\n" });
 Tk::DoOneEvent(0) until ($done);
 $top->Unbusy
a167 2

$fred = "Initial Text";
a168 1
my $bl = $top->Balloon;
d172 3
d176 8
d185 2
a186 3
my $q = &button($bf,"-image",$QuitPB,"-activeimage",$QuitPBa,
        "-command", sub { exit });
$bl->attach($q, -msg => "Exit Application");
d188 2
a189 11
&button($bf,"-text","Cluster","-command", \&cluster_all);

$main::Water = 1;

$entry = &entry($top,0,"-width","30","-textvariable",\$fred);

&label($top,"-bitmap"=>"info");

$top->Icon(-image => $camel);

$top->property("set",MYPROP,AREA,32,[1,2,3,4,5]);
d219 23
@


1.2
log
@*** empty log message ***
@
text
@a16 7
sub showbinding {
 my $w = shift;
 foreach ($w->bind()) {
   print "$w $_ = ",$w->bind($_),"\n";
  }
}

a128 17
}

sub entry_check {
 my ($i);
 for ($i = 0; $i < $entry->width; $i++) {
   my $cur = $entry->index('@@'.$i);
   print "$i => $cur\n";
  }
}

sub popup {my $w = shift;
 my $top = $w->MainWindow;
 $w->{Cursor} = $top->cget("-cursor");
 $top->configure("-cursor"=>"watch");
 $w->Popup(-popover => $top, -popanchor => 'c', -overanchor => 'c');
 $w->update;
 $w->grab;
@


1.1
log
@Initial revision
@
text
@a14 1

a66 14
sub listbox {
 my $top = shift;
 my $l = $top->ScrlListbox("-selectmode"=>"extended",-label => 'Listbox',-takefocus => 1);
 $l->pack("-side","top","-fill","both","-expand","yes");
 return $l;
}

sub listadd {
	my $list = shift;
	foreach (@@_) {
		$l->insert("end", $_);
	}
}

d210 8
a227 18
my $bigfont = "-Adobe-Helvetica-Medium-R-Normal--*-180-*-*-*-*-*-*";

my $om = $bf->Optionmenu(-textvariable => \$option, -font => $bigfont,
                 -options => [qw(one two three four)],
                 -command => sub { print "Optionmenu set to: ",shift,"\n"}
                )->pack(-side => 'right');

my $f = $om->cget('-font');
my $ps;
my $sz = $f->PostscriptFontName($ps);
print "Font is $f $$f $ps ($sz)\n";

my $be = $bf->BrowseEntry(-variable => \$option )->pack(-side => 'right');
$be->insert('end',qw(one two three four));

$QuitPB  = $top->Pixmap('-file' => Tk->findINC("demos/images/QuitPB.xpm"));
$QuitPBa = $top->Pixmap('-file' => Tk->findINC("demos/images/QuitPBa.xpm"));

a233 9
&checkbutton($bf,"-text","oil","-variable",\$oil,-command => \&MakeBusy);
&checkbutton($bf,"-text","water","-variable",main::Water);
&radiobutton($bf,"-text","one","-variable",\$option,"-value"=>"one",-command => \&MakeBusy);
&radiobutton($bf,"-text","two","-variable",\$option,"-value"=>"two");
&radiobutton($bf,"-text","three","-variable",\$option,"-value"=>"three");
&button($bf,"-text","State","-command",
         sub {print "water=$main::Water oil=$oil option=$option\n"});
&button($bf,"-text","Chop","-command", sub { chop($fred) });

a239 11
$l = &listbox($top);

sub MakeBusy {
 $top->Busy(-recurse => 1);
 warn "Waiting\n";
 my $done = 0;
 $top->after(6000, sub { $done = 1; warn "Fired\n" });
 Tk::DoOneEvent(0) until ($done);
 $top->Unbusy
}

d259 2
a260 3
my $Simwin = MainWindow->new();
my $Battlefield = $Simwin->Scrolled('Canvas',
	-height => 700, -width =>900,
d263 1
a263 1
	-side => 'left', -fill => 'both', -expand => 1);
a427 1

a429 1
	listadd($l, "Radio $i");
@
